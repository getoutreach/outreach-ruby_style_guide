#!/usr/bin/env ruby

require 'erb'
require 'yaml'

# Sort the cops in case it hasn't already been done
`./bin/sort_cops`

COP_TYPES = {
  'Lint' => 'cops_lint',
  'Performance' => 'cops_performance',
  'Metrics' => 'cops_metrics',
  'Rails' => 'cops_rails',
  'Security' => 'cops_security',
  'Bundler' => 'cops_bundler',
  'Layout' => 'cops_layout',
  'Style' => 'cops_style'
}.freeze

def cop_type_link(type, cop)
  COP_TYPES.fetch(type)
end

def cop_anchor(type, cop)
  "#{type}#{cop}".downcase
end

def build_link(full_cop)
  type, cop = full_cop.split('/')

  return 'http://rubocop.readthedocs.io/en/latest/cops/' if type == 'AllCops'

  "http://rubocop.readthedocs.io/en/latest/#{cop_type_link(type, cop)}/##{cop_anchor(type, cop)}"
end

our_cops = YAML.load_file('.rubocop.yml')

RubcopCop = Struct.new(:full_cop_name, :configuration, :link)

@full_built_cops = our_cops.map do |cop, config|
  RubcopCop.new(cop, config, build_link(cop))
end

b = binding

template = File.open('readme_template.md.erb') { |f| f.read }

File.open('README.md', 'w') do |f|
  f.write(ERB.new(template, 0, '<>-').result b)
end
